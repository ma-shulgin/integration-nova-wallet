# Nova Schema

type Transfer @entity{
  amount: String!
  to: String!
  from: String!
  fee: BigInt!
  eventIdx: String!
  extrinisicIdx: String!
  success: Boolean!
  isTransferKeepAlive: Boolean
}

type AccountHistory @entity {
  id: ID!
  address: String!
  blockNumber: Int!
  extrinsicIdx: String
  extrinsicHash: String
  timestamp: DateTime!
  item: AccountHistoryItem!
}

union AccountHistoryItem = RewardItem | ExtrinsicItem | TransferItem | SlashItem

type Reward {
  eventIdx: String!
  amount: BigInt!
  era: Int
  stash: String
  validator: String
}

type Extrinsic {
  hash: String!
  module: String!
  call: String!
  fee: BigInt!
  success: Boolean!
}

type TransferItem {
  transfer: Transfer!
}

type RewardItem {
  reward: Reward!
}

type ExtrinsicItem {
  extrinsic: Extrinsic!
}

type SlashItem {
  slash: Reward!
}

type AccumulatedReward @entity {
  id: ID! #address
  amount: BigInt!
}

type EraValidatorInfo @entity {
  id: ID!
  address: String! 
  era: Int! 
  total: BigInt!
  own: BigInt!
  others: [IndividualExposure]!
}

type IndividualExposure {
  who: String!
  value: String!
}


type StakeChange @entity {
  id: ID!
  blockNumber: Int!
  extrinsicHash: String
  eventIdx: String!
  timestamp: BigInt! 
  address: String! 
  amount: BigInt!
  accumulatedAmount: BigInt!
  type: String!
}

type AccumulatedStake @entity {
  id: ID!
  amount: BigInt!
}

type ErrorEvent @entity {
  id: ID!
  description: String!
}